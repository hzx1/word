<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dao.registermanage.RegisterManage">

	<select id="getByName" resultType="com.po.Attributedetail">
		SELECT
		*
		FROM attributedetail
		<where>attributeid=(SELECT id FROM attribute WHERE
			attributename=#{name})
		</where>
	</select>

	<select id="getVipList" resultType="com.po.Viptype">
		SELECT * FROM viptype
	</select>

	<select id="getTypeList" resultType="com.po.Patienttype">
		SELECT * FROM patienttype
	</select>

	<select id="getDepartmentList" resultType="com.po.Department">
		SELECT * FROM
		department WHERE isvalid = 1 AND isregister = 1
	</select>

	<select id="getDoctors" resultType="com.po.Employee">
		SELECT e.*,a.detailname AS
		jobtitlename,a1.detailname AS
		positionname,a2.detailname AS
		maxeducationname,
		a3.detailname AS majorname,a4.detailname AS
		politicsstatusname,d.departmentname
		FROM employee e
		LEFT JOIN department
		d ON d.id = e.departmentid LEFT JOIN attributedetail
		a ON a.id =
		e.jobtitleid
		LEFT JOIN attributedetail a1 ON a1.id = e.positionid LEFT
		JOIN
		attributedetail a2 ON a2.id = e.maxeducationid
		LEFT JOIN
		attributedetail a3 ON a3.id = e.majorid LEFT JOIN
		attributedetail a4 ON
		a4.id = e.politicsstatusid
		LEFT JOIN role r ON
		FIND_IN_SET(e.positionid,r.positionid) WHERE e.isvalid
		= 1
		AND
		d.isregister = 1 AND r.rolename = '门诊医生'
	</select>

	<select id="getTypeName" resultType="com.po.Registertype">
		SELECT * FROM registertype
		WHERE isvalid = 1
	</select>

	<select id="findLast" resultType="com.po.Register">
		SELECT
		r.*,p.cardcode,p.patientname,CASE WHEN r.registertypeid = 0 THEN
		'自定义'
		ELSE rt.typename END AS typename,
		rt.typesum AS
		typesum,d.departmentname AS departmentname ,e.employeename AS
		doctorname,e1.employeename AS registerpersonname FROM register r
		LEFT
		JOIN patient p ON p.id = r.patientid LEFT JOIN registertype rt ON
		rt.id = r.registertypeid
		LEFT JOIN department d ON d.id =
		r.departmentid LEFT JOIN employee e ON
		e.id = r.doctorid
		LEFT JOIN
		employee e1 ON e1.id = r.registerpersonid WHERE r.isvalid = 1
		AND
		registertime BETWEEN CURRENT_DATE
		AND DATE_ADD(CURRENT_DATE, INTERVAL 1
		DAY) ORDER BY r.id DESC LIMIT 1
	</select>

	<select id="countinfo" resultType="com.po.Register"> SELECT SUM(registersum) AS
		sumregistersum, COUNT(*) AS countregister FROM
		register WHERE isvalid=1
		AND registertime
		BETWEEN CURRENT_DATE AND DATE_ADD(CURRENT_DATE,
		INTERVAL 1 DAY)
	</select>

	<select id="pageFind" resultType="com.po.Register">
		SELECT r.*,p.cardcode,p.patientname,CASE WHEN r.registertypeid = 0
		THEN '自定义' ELSE rt.typename END AS typename,
		rt.typesum,d.departmentname,e.employeename AS
		doctorname,e1.employeename AS registerpersonname FROM register r
		LEFT
		JOIN patient p ON p.id = r.patientid LEFT JOIN registertype rt ON
		rt.id = r.registertypeid
		LEFT JOIN department d ON d.id =
		r.departmentid LEFT JOIN employee e ON
		e.id = r.doctorid
		LEFT JOIN
		employee e1 ON e1.id = r.registerpersonid WHERE r.isvalid = 1
		AND
		registertime BETWEEN CURRENT_DATE
		AND DATE_ADD(CURRENT_DATE, INTERVAL 1
		DAY) ORDER BY id DESC

		<if test="currentpage==0">
			LIMIT
			0,#{pageSize}
		</if>
		<if test="currentpage>0">
			LIMIT #{currentpage},#{pageSize}
		</if>
	</select>

	<insert id="addPatient" parameterType="com.po.Patient">
		INSERT INTO patient
		(cardcode, patientname, sex,
		maritalstatusid, job, patienttypeid,
		age,
		insuretypeid, medicarecode,
		viptypeid, tel, address,
		taboo,
		drugallergyhistory)
		VALUES (#{cardCode},
		#{patientName},
		#{sex},
		#{maritalstatusId},
		#{job},
		#{patienttypeId},
		#{age},
		#{insuretypeId},
		#{medicareCode},
		#{viptypeId},
		#{tel},
		#{address},
		#{taboo},
		#{drugallergyHistory})
	</insert>

	<select id="getPatientByCode" resultType="com.po.Patient">
		SELECT p.*,pt.typename AS patienttypename,v.typename AS
		viptypename,a.detailname AS maritalstatusname,a1.detailname AS
		insuretypename
		FROM patient p INNER JOIN patienttype pt ON pt.id = p.patienttypeid INNER
		JOIN viptype v ON v.id = p.viptypeid
		INNER JOIN attributedetail a ON a.id = p.maritalstatusid INNER JOIN
		attributedetail a1 ON a1.id = p.insuretypeid
		<where>
			<if test="code!=null and code!=''">p.cardcode LIKE CONCAT('%',#{code},'%')</if>
		</where>
	</select>

	<insert id="add" parameterType="com.po.Register">
		insert into register (patientid, registertypeid, registercode,
		departmentid, doctorid, registersum,
		registertime, registerstatus, registerpersonid,
		isvalid, note)
		values
		(#{patientId},
		#{registerTypeId},
		#{registerCode},
		#{departmentId},
		#{doctorId},
		#{registerSum},
		#{registerTime},
		#{registerStatus},
		#{registerPersonId},
		#{isvalId},
		#{note})
	</insert>

	<select id="getDoctorsTwo" resultType="com.po.Employee">
		SELECT employee.* FROM
		employee
		LEFT JOIN department ON employee.departmentid=department.id
		WHERE department.`id`=#{id}
	</select>
	<update id="delect">
		UPDATE register SET isvalid = 2 WHERE id = #{id}
	</update>
	<select id="getLiShi" resultType="com.po.Register">
		SELECT r.*,p.*,a.detailname AS insuretypename,CASE WHEN r.registertypeid = 0 THEN '自定义' ELSE rt.typename END AS typename,
	rt.typesum,d.departmentname,e.employeename AS doctorname,e1.employeename AS registerpersonname FROM register r 
	LEFT JOIN patient p ON p.id = r.patientid LEFT JOIN registertype rt ON rt.id = r.registertypeid 
	LEFT JOIN department d ON d.id = r.departmentid LEFT JOIN employee e ON e.id = r.doctorid 
	LEFT JOIN employee e1 ON e1.id = r.registerpersonid LEFT JOIN attributedetail a ON a.id = p.insuretypeid 
	WHERE r.isvalid = 1 AND LOCATE(#{rs.cardCode,jdbcType=VARCHAR},cardCode) AND LOCATE(#{rs.patientName,jdbcType=VARCHAR},patientName) AND 
	LOCATE((CASE WHEN #{rs.registerPersonId,jdbcType=INTEGER} = 0 THEN '' ELSE #{rs.registerPersonId,jdbcType=INTEGER} END),registerPersonId) AND 
	LOCATE((CASE WHEN #{rs.registerStatus,jdbcType=INTEGER} = 0 THEN '' ELSE #{rs.registerStatus,jdbcType=INTEGER} END),registerStatus) AND 
	UNIX_TIMESTAMP(registerTime) &gt;= UNIX_TIMESTAMP(CASE WHEN #{rs.begintime,jdbcType=VARCHAR} = '' THEN 
	registerTime ELSE #{rs.begintime,jdbcType=VARCHAR} END) AND 
	UNIX_TIMESTAMP (registerTime) &lt;= UNIX_TIMESTAMP(CASE WHEN #{rs.endtime,jdbcType=VARCHAR} = '' THEN 
	registerTime ELSE DATE_ADD(#{rs.endtime,jdbcType=VARCHAR},INTERVAL 1 DAY) END) ORDER BY r.id DESC
	<if test="currentpage==0">
		limit 0, #{pageSize,jdbcType=INTEGER}
	</if>
	<if test="currentpage&gt;0">
		limit #{currentpage},#{pageSize}
	</if>
	</select>
</mapper>